#!/bin/bash

# This script clones the git repository from GitLab and installs the files to the appropriate directories.

# Basic colors
GREEN=$(printf '\033[1;32m')
YELLOW=$(printf '\033[1;33m')
RED=$(printf '\033[1;31m')
PINK=$(printf '\033[1;38;5;198m')
PURPLE=$(printf '\033[1;35m')
CYAN=$(printf '\033[1;36m')
BOLD=$(printf '\033[1m')
UNDERLINE=$(printf '\033[4m')
RESET=$(printf '\033[0m')

# Functions for colored messages
msg() { printf "${PINK}*${RESET} %s\n" "$1"; }
error() { printf "${RED}✗${RESET} %s\n" "$1"; }
warning() { printf "${YELLOW}!${RESET} %s\n" "$1"; }
success() { printf "${GREEN}✓${RESET} %s\n" "$1"; }

# Function to get user confirmation
get_confirmation() {
    local prompt="$1"
    local default="$2"
    local answer

    # Try to read from /dev/tty (terminal) even if script is being piped
    if [ -t 0 ]; then
        # Standard input is a terminal
        echo -n "$prompt" >&2
        read -r answer
    elif [ -e /dev/tty ]; then
        # We're in a pipe but /dev/tty exists (we can still be interactive)
        echo -n "$prompt" >/dev/tty
        read -r answer </dev/tty
    else
        # No way to be interactive
        answer="$default"
        echo "Using default answer: $default" >&2
    fi

    echo "$answer"
}

# Check if the script is run as root
if [ $EUID != 0 ]; then
    error "This script must be run as root."
    exit 1
fi

# Destination directories and files
DEST_BIN_DIR="/usr/local/bin"
DEST_SHARE_DIR="/usr/local/share"
SCRIPT_PATH="$DEST_BIN_DIR/sandbox"
TEMP_DIR="/tmp/sandbox"

# Check if the script is already installed
if [ -f "$SCRIPT_PATH" ]; then
    warning "Script already installed at $SCRIPT_PATH."

    answer=$(get_confirmation "Do you want to overwrite it? (y/N): " "n")

    if [[ "$answer" != "y" && "$answer" != "Y" ]]; then
        echo "Installation aborted." >&2
        exit 0
    fi
fi

# Check if git is installed
if ! command -v git &>/dev/null; then
    error "Git is not installed. Please install Git and try again."
    exit 1
fi

# Remove temporary directory if it exists
if [ -d "$TEMP_DIR" ]; then
    warning "Removing existing temporary directory..."
    rm -rf "$TEMP_DIR"
fi

# Clone the repository
echo "Downloading files from GitLab..." >&2
git clone --single-branch --branch main https://gitlab.com/KOD3X/sandbox.git "$TEMP_DIR"
if [ $? -ne 0 ]; then
    error "Error downloading from GitLab."
    exit 1
fi

# Copy bin files to /usr/local/bin
echo "Copying bin files to $DEST_BIN_DIR..." >&2
cp -r "$TEMP_DIR/src/bin"/* "$DEST_BIN_DIR"
if [ $? -ne 0 ]; then
    error "Error copying bin files."
    exit 1
fi

# Copy share files to /usr/local/share
echo "Copying share files to $DEST_SHARE_DIR..." >&2
cp -r "$TEMP_DIR/src/share"/* "$DEST_SHARE_DIR"
if [ $? -ne 0 ]; then
    error "Error copying share files."
    exit 1
fi

# Remove temporary directory
rm -rf "$TEMP_DIR"

success "Installation completed successfully."
exit 0
